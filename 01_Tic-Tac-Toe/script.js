// Находим элементы в DOM
const board = document.getElementById('game-board'); // Игровое поле
const statusText = document.getElementById('status'); // Текст статуса игры (чей ход, победа и т.д.)
const restartButton = document.getElementById('restart'); // Кнопка для перезапуска игры

// Переменные для управления игрой
let currentPlayer = 'X'; // Текущий игрок ('X' или 'O')
let gameActive = true; // Флаг, указывающий, активна ли игра (false при победе или ничьей)

// Массив для хранения состояния игрового поля. 
// Изначально все клетки пустые (null).
const gameState = Array(9).fill(null);

// Возможные выигрышные комбинации (индексы клеток)
const winningCombinations = [
  [0, 1, 2], // Первая строка
  [3, 4, 5], // Вторая строка
  [6, 7, 8], // Третья строка
  [0, 3, 6], // Первый столбец
  [1, 4, 7], // Второй столбец
  [2, 5, 8], // Третий столбец
  [0, 4, 8], // Диагональ слева направо
  [2, 4, 6]  // Диагональ справа налево
];

// Функция для создания игрового поля
function createBoard() {
  board.innerHTML = ''; // Очищаем игровое поле перед созданием клеток

  // Проходим по массиву gameState и создаём клетки для каждой позиции
  gameState.forEach((_, index) => {
    const cell = document.createElement('div'); // Создаём элемент <div> для клетки
    cell.classList.add('cell'); // Добавляем класс "cell" для стилизации
    cell.dataset.index = index; // Сохраняем индекс клетки в data-атрибуте

    board.appendChild(cell); // Добавляем клетку в игровое поле

    // Навешиваем обработчик клика на клетку
    cell.addEventListener('click', handleCellClick);
  });
}

// Функция обработки клика по клетке
function handleCellClick(event) {
  const cell = event.target; // Получаем элемент, по которому кликнули
  const index = cell.dataset.index; // Получаем индекс клетки из data-атрибута

  // Проверяем: если клетка уже занята или игра завершена — ничего не делаем
  if (gameState[index] || !gameActive) return;

  // Обновляем состояние игры: записываем текущего игрока в массив gameState
  gameState[index] = currentPlayer;

  // Отображаем в клетке символ текущего игрока ('X' или 'O')
  cell.textContent = currentPlayer;

  // Добавляем класс "taken", чтобы визуально показать, что клетка занята
  cell.classList.add('taken');

  // Проверяем, есть ли победитель после этого хода
  if (checkWinner()) {
    statusText.textContent = `Игрок ${currentPlayer} победил!`; // Показываем сообщение о победе
    gameActive = false; // Останавливаем игру
    return;
  }

  // Проверяем, закончились ли свободные клетки (ничья)
  if (gameState.every(cell => cell)) {
    statusText.textContent = 'Ничья!'; // Показываем сообщение о ничьей
    gameActive = false; // Останавливаем игру
    return;
  }

  // Если никто не выиграл и не ничья — меняем игрока на следующего
  currentPlayer = currentPlayer === 'X' ? 'O' : 'X'; // Если был 'X', то теперь 'O', и наоборот

  // Обновляем текст статуса (чей ход сейчас)
  statusText.textContent = `Ход игрока ${currentPlayer}`;
}

// Функция проверки победителя
function checkWinner() {
  // Проверяем каждую выигрышную комбинацию из массива winningCombinations
  return winningCombinations.some(combination => {
    const [a, b, c] = combination; // Получаем три индекса из комбинации

    // Проверяем: если в этих трёх клетках одинаковый символ (и они не пустые), то это победа
    return gameState[a] && gameState[a] === gameState[b] && gameState[a] === gameState[c];
  });
}

// Функция перезапуска игры
function restartGame() {
  currentPlayer = 'X'; // Сбрасываем текущего игрока на 'X'
  gameActive = true; // Делаем игру активной снова
  gameState.fill(null); // Очищаем массив состояния игрового поля

  statusText.textContent = `Ход игрока ${currentPlayer}`; // Обновляем текст статуса

  createBoard(); // Пересоздаём игровое поле
}

// Навешиваем обработчик на кнопку "Начать заново"
restartButton.addEventListener('click', restartGame);

// Инициализация игры при загрузке страницы
createBoard(); // Создаём игровое поле
statusText.textContent = `Ход игрока ${currentPlayer}`; // Показываем начальный статус игры

/** ▎Подробное объяснение:

1. Создание поля (createBoard):

   • Поле состоит из девяти клеток. Каждая клетка — это <div> с классом cell.

   • Каждой клетке присваивается уникальный data-index, чтобы мы могли связать её с соответствующим элементом в массиве gameState.

2. Обработка кликов (handleCellClick):

   • Когда пользователь кликает на клетку, проверяется:

     • Не занята ли клетка.

     • Не завершена ли игра.

   • Если всё нормально:

     • В массив gameState записывается текущий игрок.

     • Клетке присваивается текст (X или O).

     • Проверяется, есть ли победитель или ничья.

     • Если нет победителя, ход передаётся другому игроку.

3. Проверка победителя (checkWinner):

   • Проходим по всем возможным выигрышным комбинациям.

   • Если три клетки из одной комбинации заполнены одним и тем же символом (X или O), возвращается true.

4. Перезапуск игры (restartGame):

   • Все переменные сбрасываются в начальное состояние.

   • Массив gameState очищается.

   • Поле пересоздаётся.

5. Инициализация игры:

   • При загрузке страницы создаётся игровое поле и отображается начальный статус.

---

Теперь вы можете легко понять и модифицировать игру! Например:

• Добавить анимации при победе.

• Добавить счётчик побед.

• Реализовать игру против компьютера. */